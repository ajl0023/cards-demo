{"version":3,"sources":["styles.module.css","App.tsx","index.tsx"],"names":["module","exports","cards","to","i","x","y","scale","rot","Math","random","delay","trans","r","s","Deck","useState","Set","gone","useSprings","length","from","props","api","bind","useDrag","index","args","down","mx","movement","xDir","direction","velocity","dir","add","start","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","div","className","styles","deck","style","transform","interpolate","backgroundImage","App","container","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,uB,wJCKzDC,EAAQ,CACZ,2EACA,wEACA,0EACA,yEACA,6HACA,4EAIIC,EAAK,SAACC,GAAD,MAAgB,CACzBC,EAAG,EACHC,GAAQ,EAALF,EACHG,MAAO,EACPC,IAA2B,GAAhBC,KAAKC,SAAV,GACNC,MAAW,IAAJP,IAIHQ,EAAQ,SAACC,EAAWC,GAAZ,2DACkCD,EAAI,GADtC,wBACwDA,EADxD,sBACuEC,EADvE,MAGd,SAASC,IACP,MAAeC,oBAAS,kBAAM,IAAIC,OAA3BC,EAAP,oBACA,EAAqBC,qBAAWjB,EAAMkB,QAAQ,SAAAhB,GAAC,kCAC1CD,EAAGC,IADuC,IAE7CiB,KAT0B,CAAEhB,EAAG,EAAGG,IAAK,EAAGD,MAAO,IAAKD,EAAG,UAO3D,mBAAOgB,EAAP,KAAcC,EAAd,KAKMC,EAAOC,aAAQ,YAA2E,IAAjEC,EAAgE,cAAvEC,KAAuE,MAAxDC,EAAwD,EAAxDA,KAAiBC,EAAuC,cAAlDC,SAAkD,MAAtBC,EAAsB,cAAlCC,UAAkC,MAAfC,EAAe,EAAfA,SAExEC,EAAMH,EAAO,GAAK,EAAI,GACvBH,GAFWK,EAAW,IAELf,EAAKiB,IAAIT,GAC/BH,EAAIa,OAAM,SAAAhC,GACR,GAAIsB,IAAUtB,EAAd,CACA,IAAMiC,EAASnB,EAAKoB,IAAIZ,GAIxB,MAAO,CACLrB,EAJQgC,GAAU,IAAME,OAAOC,YAAcN,EAAMN,EAAOC,EAAK,EAK/DrB,IAJUqB,EAAK,KAAOQ,EAAe,GAANH,EAAWD,EAAW,GAKrD1B,MAJYqB,EAAO,IAAM,EAKzBjB,WAAO8B,EACPC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,UAG5DT,GAAQV,EAAK2B,OAAS3C,EAAMkB,QAC/B0B,YAAW,WACT5B,EAAK6B,QACLxB,EAAIa,OAAM,SAAAhC,GAAC,OAAID,EAAGC,QACjB,QAGP,OACE,mCACGkB,EAAM0B,KAAI,WAAuB5C,GAAvB,IAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGE,EAAT,EAASA,IAAKD,EAAd,EAAcA,MAAd,OACT,cAAC,WAAS0C,IAAV,CAAcC,UAAWC,IAAOC,KAAcC,MAAO,CAAEhD,IAAGC,KAA1D,SAEE,cAAC,WAAS2C,IAAV,2BACMzB,EAAKpB,IADX,IAEEiD,MAAO,CACLC,UAAWC,aAAY,CAAC/C,EAAKD,GAAQK,GACrC4C,gBAAgB,OAAD,OAAStD,EAAME,GAAf,UANsBA,QAepC,SAASqD,IACtB,OACE,qBAAKP,UAAWC,IAAOO,UAAvB,SACE,cAAC3C,EAAD,M,UC5EA4C,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACP,EAAD,MAEFE,K","file":"static/js/main.aed1301b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2JaxF\",\"deck\":\"styles_deck__2UAnu\"};","import React, { useState } from 'react'\nimport { useSprings, animated, to as interpolate } from '@react-spring/web'\nimport { useDrag } from 'react-use-gesture'\n\nimport styles from './styles.module.css'\n\nconst cards = [\n  'https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg',\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = (i: number) => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100,\n})\nconst from = (_i: number) => ({ x: 0, rot: 0, scale: 1.5, y: 200 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r: number, s: number) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nfunction Deck() {\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n  const [props, api] = useSprings(cards.length, i => ({\n    ...to(i),\n    from: from(i),\n  })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useDrag(({ args: [index], down, movement: [mx], direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    api.start(i => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? mx : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = mx / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 },\n      }\n    })\n    if (!down && gone.size === cards.length)\n      setTimeout(() => {\n        gone.clear()\n        api.start(i => to(i))\n      }, 600)\n  })\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return (\n    <>\n      {props.map(({ x, y, rot, scale }, i) => (\n        <animated.div className={styles.deck} key={i} style={{ x, y }}>\n          {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n          <animated.div\n            {...bind(i)}\n            style={{\n              transform: interpolate([rot, scale], trans),\n              backgroundImage: `url(${cards[i]})`,\n            }}\n          />\n        </animated.div>\n      ))}\n    </>\n  )\n}\n\nexport default function App() {\n  return (\n    <div className={styles.container}>\n      <Deck />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n)\n"],"sourceRoot":""}